name: Build main

on:
  push:
    branches: 'main'

jobs:
  build-linux:
    name: Linux build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.1'
          java-version: '17'
          components: 'native-image,js'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Build
        run: |
          mkdir -p nexus-staging/de/atextor/test/foo/1.0.0
          pushd nexus-staging/de/atextor/test/foo/1.0.0
          touch test-1.0.0{.jar,.jar.md5,.jar.sha1,.pom,.pom.md5,.pom.sha1,-sources.jar,-sources.jar.md5,-sources.jar.sha1}
          popd
          mkdir -p foo/target
          pushd foo/target
          touch binary
          echo "built on linux" > foo-1.0.0.jar
          popd

      - name: Upload staging directory and Linux binary
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifacts
          path: |
            nexus-staging/
            foo/target/binary
            foo/target/foo-*.jar

  build-windows:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.1'
          java-version: '17'
          components: 'native-image,js'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'

      - name: Build and run tests
        run: |
          mkdir -p foo/target
          pushd foo/target
          touch {x,y,z}.dll
          touch binary.exe
          mkdir lib
          touch lib/z.conf
          echo "built on windows" > foo-1.0.0.jar
          popd
        shell: bash

      - name: Upload Windows binary
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifacts
          path: |
            foo/target/binary.exe
            foo/target/*.dll
            foo/target/lib/

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Linux Artifacts
        uses: actions/download-artifact@v2
        with:
          name: linux-artifacts

      - name: Fetch Windows Artifacts
        uses: actions/download-artifact@v2
        with:
          name: windows-artifacts

      - name: Show current state
        run: |
          zip -r binary-windows.zip binary.exe *.dll lib/
          unzip -l binary-windows.zip

  # build-and-test:
  #   name: ${{ matrix.os }} build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       # os: [macos-latest, windows-latest, ubuntu-latest]
  #       # os: [ubuntu-latest]
  #       os: [windows-latest]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup JDK
  #       uses: graalvm/setup-graalvm@v1
  #       with:
  #         version: '22.3.0'
  #         java-version: '17'
  #         components: 'native-image,js'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         native-image-job-reports: 'true'

  #     - name: Linux System Information
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         set -x
  #         java --version
  #         # env
  #         # tree /opt/hostedtoolcache/
  #         mkdir -p some/folder
  #         echo "test1" > some/folder/myfile
  #         echo "test2" > some/folder/myfile.txt

  #     - name: Upload test files
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: helloworld-${{ matrix.os }}
  #         path: |
  #           some/folder/myfile
  #           some/folder/myfile.txt
  #           some/folder/myfile.foo

  #     - name: Windows System Information
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         set -x
  #         java --version
  #         env
  #         mvn compile
  #         java -cp target/classes org.example.Main
  #       shell: bash

      # - name: MacOS System Information
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     set -x
      #     java --version
      #     env
      #     ls -lR /Users/runner/hostedtoolcache

