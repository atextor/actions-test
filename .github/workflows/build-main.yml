name: Build main

on:
  push:
    branches: 'main'

env:
  FOO: "test"

jobs:
  # build-linux:
  #   name: Linux build
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

      # - name: Set up JDK
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: 'temurin'
      #     java-version: '17'
      #     server-id: ossrh
      #     server-username: OSSRH_USERNAME
      #     server-password: OSSRH_TOKEN
      #     overwrite-settings: false

      # - name: Setup Environment
      #   run: |-
      #     echo Path settings: $PATH
      #     which java
      #     java -version

      # - name: Setup JDK
      #   uses: graalvm/setup-graalvm@v1
      #   with:
      #     version: '22.3.1'
      #     java-version: '17'
      #     components: 'native-image,js'
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     native-image-job-reports: 'true'

      # - name: Build
      #   run: |
      #     mkdir -p nexus-staging/de/atextor/test/foo/1.0.0
      #     pushd nexus-staging/de/atextor/test/foo/1.0.0
      #     touch test-1.0.0{.jar,.jar.md5,.jar.sha1,.pom,.pom.md5,.pom.sha1,-sources.jar,-sources.jar.md5,-sources.jar.sha1}
      #     popd
      #     mkdir -p foo/target
      #     pushd foo/target
      #     touch binary
      #     echo "built on linux" > foo-1.0.0.jar
      #     popd

      # - name: Upload staging directory and Linux binary
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: linux-artifacts
      #     path: |
      #       nexus-staging/
      #       foo/target/binary
      #       foo/target/foo-*.jar

  build-windows:
    name: Windows build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Test uname
        run: |
          echo "uname -m: " $(uname -m)
          echo "uname -o: " $(uname -o)
          echo "env variable: ${{ env.FOO }}"
        shell: bash

  #     - name: List free disk space
  #       run: |
  #         wmic logicaldisk get size, freespace, caption

  #     - uses: al-cheb/configure-pagefile-action@v1.3
  #       with:
  #         minimum-size: 32GB
  #         maximum-size: 32GB
  #         disk-root: "C:"

      # - uses: al-cheb/configure-pagefile-action@v1.3
      #   with:
      #     minimum-size: 16GB
      #     maximum-size: 16GB
      #     disk-root: "D:"

      # - name: Setup Environment
      #   run: |-
      #     choco install zip --execution-timeout=600
      #     choco install unzip --execution-timeout=600
      #     curl -sL https://get.sdkman.io | bash
      #     echo sdkman_auto_answer=true > $HOME/.sdkman/etc/config
      #     echo sdkman_auto_selfupdate=true >> $HOME/.sdkman/etc/config
      #     source $HOME/.sdkman/bin/sdkman-init.sh
      #     sdk update
      #     sdk list java
      #     sdk install java 17.0.8-graal || true
      #     sdk use java 17.0.8-graal
      #     echo Path settings: $PATH
      #     export PATH=$HOME/.sdkman/candidates/java/current/lib/installer/bin:$PATH
      #     export GRAALVM_HOME=$HOME/.sdkman/candidates/java/17.0.8-graal
      #     find $HOME/.sdkman -type f -name '*gu*'
      #     gu.cmd install native-image
      #     find $HOME/.sdkman -type f -name '*native-image*'
      #     unset _JAVA_OPTIONS
      #     export PATH=$HOME/.sdkman/candidates/java/current/lib/svm/bin:$PATH
      #     which native-image
      #     which java
      #     java -version
      #     file `which native-image`
      #     native-image --version
      #     rm -rf .cache
      #   shell: bash

  #     - name: Setup JDK
  #       uses: graalvm/setup-graalvm@v1
  #       with:
  #         version: '22.3.1'
  #         java-version: '17'
  #         components: 'native-image,js'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         native-image-job-reports: 'true'

  #     - name: Build and run tests
  #       run: |
  #         mkdir -p foo/target
  #         pushd foo/target
  #         touch {x,y,z}.dll
  #         touch binary.exe
  #         mkdir lib
  #         touch lib/z.conf
  #         echo "built on windows" > foo-1.0.0.jar
  #         popd
  #       shell: bash

  #     - name: Upload Windows binary
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: windows-artifacts
  #         path: |
  #           foo/target/binary.exe
  #           foo/target/*.dll
  #           foo/target/lib/

  # release:
  #   needs: [build-linux, build-windows]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Fetch Linux Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: linux-artifacts

  #     - name: Fetch Windows Artifacts
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: windows-artifacts

  #     - name: Show current state
  #       run: |
  #         zip -r binary-windows.zip binary.exe *.dll lib/
  #         unzip -l binary-windows.zip

  # build-and-test:
  #   name: ${{ matrix.os }} build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       # os: [macos-latest, windows-latest, ubuntu-latest]
  #       # os: [ubuntu-latest]
  #       os: [windows-latest]

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup JDK
  #       uses: graalvm/setup-graalvm@v1
  #       with:
  #         version: '22.3.0'
  #         java-version: '17'
  #         components: 'native-image,js'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         native-image-job-reports: 'true'

  #     - name: Linux System Information
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         set -x
  #         java --version
  #         # env
  #         # tree /opt/hostedtoolcache/
  #         mkdir -p some/folder
  #         echo "test1" > some/folder/myfile
  #         echo "test2" > some/folder/myfile.txt

  #     - name: Upload test files
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: helloworld-${{ matrix.os }}
  #         path: |
  #           some/folder/myfile
  #           some/folder/myfile.txt
  #           some/folder/myfile.foo

  #     - name: Windows System Information
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         set -x
  #         java --version
  #         env
  #         mvn compile
  #         java -cp target/classes org.example.Main
  #       shell: bash

      # - name: MacOS System Information
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     set -x
      #     java --version
      #     env
      #     ls -lR /Users/runner/hostedtoolcache

